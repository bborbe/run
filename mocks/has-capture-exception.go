// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/bborbe/run"
	sentry "github.com/getsentry/sentry-go"
)

type HasCaptureException struct {
	CaptureExceptionStub        func(error, *sentry.EventHint, sentry.EventModifier) *sentry.EventID
	captureExceptionMutex       sync.RWMutex
	captureExceptionArgsForCall []struct {
		arg1 error
		arg2 *sentry.EventHint
		arg3 sentry.EventModifier
	}
	captureExceptionReturns struct {
		result1 *sentry.EventID
	}
	captureExceptionReturnsOnCall map[int]struct {
		result1 *sentry.EventID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HasCaptureException) CaptureException(arg1 error, arg2 *sentry.EventHint, arg3 sentry.EventModifier) *sentry.EventID {
	fake.captureExceptionMutex.Lock()
	ret, specificReturn := fake.captureExceptionReturnsOnCall[len(fake.captureExceptionArgsForCall)]
	fake.captureExceptionArgsForCall = append(fake.captureExceptionArgsForCall, struct {
		arg1 error
		arg2 *sentry.EventHint
		arg3 sentry.EventModifier
	}{arg1, arg2, arg3})
	stub := fake.CaptureExceptionStub
	fakeReturns := fake.captureExceptionReturns
	fake.recordInvocation("CaptureException", []interface{}{arg1, arg2, arg3})
	fake.captureExceptionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HasCaptureException) CaptureExceptionCallCount() int {
	fake.captureExceptionMutex.RLock()
	defer fake.captureExceptionMutex.RUnlock()
	return len(fake.captureExceptionArgsForCall)
}

func (fake *HasCaptureException) CaptureExceptionCalls(stub func(error, *sentry.EventHint, sentry.EventModifier) *sentry.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = stub
}

func (fake *HasCaptureException) CaptureExceptionArgsForCall(i int) (error, *sentry.EventHint, sentry.EventModifier) {
	fake.captureExceptionMutex.RLock()
	defer fake.captureExceptionMutex.RUnlock()
	argsForCall := fake.captureExceptionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *HasCaptureException) CaptureExceptionReturns(result1 *sentry.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = nil
	fake.captureExceptionReturns = struct {
		result1 *sentry.EventID
	}{result1}
}

func (fake *HasCaptureException) CaptureExceptionReturnsOnCall(i int, result1 *sentry.EventID) {
	fake.captureExceptionMutex.Lock()
	defer fake.captureExceptionMutex.Unlock()
	fake.CaptureExceptionStub = nil
	if fake.captureExceptionReturnsOnCall == nil {
		fake.captureExceptionReturnsOnCall = make(map[int]struct {
			result1 *sentry.EventID
		})
	}
	fake.captureExceptionReturnsOnCall[i] = struct {
		result1 *sentry.EventID
	}{result1}
}

func (fake *HasCaptureException) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HasCaptureException) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ run.HasCaptureException = new(HasCaptureException)
